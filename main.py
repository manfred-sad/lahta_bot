import requests
import os
import time
import logging
from colorlog import ColoredFormatter
from logging.handlers import TimedRotatingFileHandler
from datetime import datetime


last_message_time = None
msg_sleep = 0 #–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 
msg = True
ticket = False
i = 1

def log(log_file='out.log'):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    log_dir = os.path.join(current_dir, 'logs')

    if not os.path.exists(log_dir):
        os.makedirs(log_dir)

    log_file_path = os.path.join(log_dir, log_file)

    logger = logging.getLogger('my_logger')
    logger.setLevel(logging.DEBUG)
    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞
    file_formatter = logging.Formatter(
        '%(asctime)s.%(msecs)d [%(levelname)s] %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    # –†–æ—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    file_handler = TimedRotatingFileHandler(
        log_file_path, 
        when='midnight',  # –†–æ—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å
        interval=1,  # –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        backupCount=30,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        encoding='utf-8',  # –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
        delay=False,  # –û—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –¥–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª
    )
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(file_formatter)
    logger.addHandler(file_handler)

    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_formatter = ColoredFormatter(
        '%(log_color)s%(asctime)s.%(msecs)03d [%(levelname)s] %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
        reset=True,
        log_colors={
            'DEBUG':    'cyan',  # –ë–µ–ª—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            'INFO':     'green',  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            'WARNING':  'yellow',
            'ERROR':    'red',
            'CRITICAL': 'bold_red,bg_white',
            'asctime':  'green',  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
            'levelname': 'green'   # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∞ (INFO)
        }
    )
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.DEBUG)
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)

    return logger

logger = log()

def send_telegram_message(message):
    
    bot_token = '8124405995:AAHX6Pm5JcM-QmpMUNc-bSu7rSrECfZxzs8' #—Ç—É—Ç –Ω–∞–¥–æ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–±–∞–≤–∏—Ç—å
    #chat_id = "@lahta_tickets" #–∏ ID —Å–≤–æ–µ–≥–æ —á–∞—Ç–∞
    chat_id = "55792067"
    global last_message_time
    current_time = datetime.now()

    if last_message_time is None or (current_time - last_message_time).total_seconds() >= msg_sleep: #—Ç–∞–∫ –∫–∞–∫ msg_sleep = 0, —Ç–æ –¥–∞–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –≤—Å–µ–≥–¥–∞ –≤–µ—Ä–Ω–æ. –ø—Ä–æ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–æ—Ç–æ–≤.
        try:
            message_send = requests.Session()
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            params = {
                'chat_id': chat_id,
                'parse_mode': 'html',
                'text': message,
                'disable_web_page_preview': True 
            }
            res = message_send.post(url, params=params)

            if res.status_code == 200:
                response_data = res.json()
                message_id = response_data['result']['message_id']
                logger.info(f"message_id: {message_id}")
                last_message_time = current_time
                logger.info(f"Telegram message sent successfully. Status {res.status_code}.")
                #msg_sleep = 600

            else:
                logger.error(f"Failed to send Telegram message. Status {res.status_code}. Text: {res.text}")
        except Exception as e:

            logger.error("Error sending Telegram message: ", exc_info=True)
    else:
        logger.info("Message not sent (too soon).")

def check_slots(i):
    global msg
    global ticket
    global msg_sleep
    url = "https://tickets.lakhta.events/api/no-scheme"

    headers = {
        "Accept": "application/json, text/plain, */*",
        "Accept-Encoding": "gzip, deflate, br, zstd",
        "Accept-Language": "ru,fi;q=0.9,it;q=0.8,ko;q=0.7,fr;q=0.6,en;q=0.5,tr;q=0.4,de;q=0.3,pt;q=0.2,el;q=0.1",
        "Content-Type": "application/json;charset=UTF-8",
        "Cookie": "LAKHTA_CENTRE_ONLINE_TICKETS=27dfdhg2dnhqkhhij3bg809u6p",
        "Origin": "https://tickets.lakhta.events",
        "Referer": "https://tickets.lakhta.events/event/23FA307410B1F9BE84842D1ABE30D6AB48EA2CF8/2025-02-08",
        "Sec-Ch-Ua": '"Chromium";v="130", "YaBrowser";v="24.12", "Not?A_Brand";v="99", "Yowser";v="2.5"',
        "Sec-Ch-Ua-Mobile": "?0",
        "Sec-Ch-Ua-Platform": '"Windows"',
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-origin",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 YaBrowser/24.12.0.0 Safari/537.36"
    }

    payload = {
        "hash": "23FA307410B1F9BE84842D1ABE30D6AB48EA2CF8"
    }

    while True:
        try:
            logger.info(f"Try #{i}")
            response = requests.post(url, json=payload, headers=headers)
            log_message = ""  #—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏, –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

            if response.status_code == 200:
                response_json = response.json()
                available_dates = response_json.get("response", {}).get("calendar", [])

                message = "<b>üé´ –ü–æ—è–≤–∏–ª–∏—Å—å –±–∏–ª–µ—Ç—ã:\n</b>" 
                found_tickets = False  

                for date_entry in available_dates:
                    date = date_entry["day"]
                    times = date_entry["_time"]

                    available_slots = [
                        f"{slot['time']} ({slot['quantity']})"
                        for slot in times if int(slot["quantity"]) > 0
                    ]

                    if available_slots: #–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–ª–µ—Ç—ã, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ–≥—É
                        found_tickets = True
                        message += f"<b>{date}</b>\n"
                        message += ", ".join(available_slots)
                        message += "\n\n"

                        log_message += f"{date}: " + ", ".join(available_slots) + "; "

                if found_tickets and msg:
                    message += "<a href='https://tickets.lakhta.events/event/23FA307410B1F9BE84842D1ABE30D6AB48EA2CF8/'> <b>–ö—É–ø–∏—Ç—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ</b></a>"
                    send_telegram_message(message)  
                    logger.info("sent tg msg TICKETS AVAILABLE")
                    msg = False 
                    ticket = True 

                elif not found_tickets and ticket:
                    message = "‚ùå <b>–ë–∏–ª–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!</b>"
                    send_telegram_message(message)
                    logger.info("sent tg msg ALL GONE")
                    msg = True 
                    ticket = False 
                    logger.info("Sleep 0.5 hours before new try")
                    time.sleep(600) 
                    # —Ç—É–ø–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 10 –º–∏–Ω—É—Ç, —á—Ç–æ–± –Ω–µ —Å–ø–∞–º–∏—Ç—å –æ –µ–¥–∏–Ω–∏—á–Ω—ã—Ö –±–∏–ª–µ—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø—É–ª
                    # TODO –ø—Ä–∏–¥—É–º–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π –±—ã –ø—Ä–æ–ø—É—Å–∫–∞–ª —Ç–∞–∫–∏–µ –≤–æ–∑–≤—Ä–∞—Ç—ã. –ú–æ–∂–µ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ 3 –±–∏–ª–µ—Ç–æ–≤?
                    # 

                logger.debug(f"–ë–∏–ª–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã! {log_message}" if found_tickets else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤")


            logger.info("Sleep before new try 1 min")
            time.sleep(60)
            i = i + 1

        except Exception as e:
            logger.error(f"Error occurred {e}")
            logger.info("sleep 600")
            time.sleep(600)

if __name__ == "__main__":
    logger.info("Start Cheking tickets")
    check_slots(i) 